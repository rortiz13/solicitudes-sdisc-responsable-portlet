/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package la.netco.solicitudes_sdisc.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import la.netco.solicitudes_sdisc.model.model.Solicitud;
import la.netco.solicitudes_sdisc.model.model.SolicitudModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Solicitud service. Represents a row in the &quot;SOLISALAD_SOLICITUD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link la.netco.solicitudes_sdisc.model.model.SolicitudModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SolicitudImpl}.
 * </p>
 *
 * @author smontanez
 * @see SolicitudImpl
 * @see la.netco.solicitudes_sdisc.model.model.Solicitud
 * @see la.netco.solicitudes_sdisc.model.model.SolicitudModel
 * @generated
 */
public class SolicitudModelImpl extends BaseModelImpl<Solicitud>
	implements SolicitudModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Solicitud model instance should use the {@link la.netco.solicitudes_sdisc.model.model.Solicitud} interface instead.
	 */
	public static final String TABLE_NAME = "SOLISALAD_SOLICITUD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_solicitud", Types.INTEGER },
			{ "hechos", Types.VARCHAR },
			{ "pruebas", Types.VARCHAR },
			{ "id_estado", Types.INTEGER },
			{ "id_implicado", Types.INTEGER },
			{ "id_solicitante", Types.INTEGER },
			{ "fechaRegistro", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SOLISALAD_SOLICITUD (id_solicitud INTEGER not null primary key IDENTITY,hechos VARCHAR(75) null,pruebas VARCHAR(75) null,id_estado INTEGER,id_implicado INTEGER,id_solicitante INTEGER,fechaRegistro DATE null)";
	public static final String TABLE_SQL_DROP = "drop table SOLISALAD_SOLICITUD";
	public static final String DATA_SOURCE = "csjDBDatasource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.la.netco.solicitudes_sdisc.model.model.Solicitud"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.la.netco.solicitudes_sdisc.model.model.Solicitud"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.la.netco.solicitudes_sdisc.model.model.Solicitud"));

	public SolicitudModelImpl() {
	}

	public int getPrimaryKey() {
		return _id_solicitud;
	}

	public void setPrimaryKey(int primaryKey) {
		setId_solicitud(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id_solicitud);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Solicitud.class;
	}

	public String getModelClassName() {
		return Solicitud.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_solicitud", getId_solicitud());
		attributes.put("hechos", getHechos());
		attributes.put("pruebas", getPruebas());
		attributes.put("id_estado", getId_estado());
		attributes.put("id_implicado", getId_implicado());
		attributes.put("id_solicitante", getId_solicitante());
		attributes.put("fechaRegistro", getFechaRegistro());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id_solicitud = (Integer)attributes.get("id_solicitud");

		if (id_solicitud != null) {
			setId_solicitud(id_solicitud);
		}

		String hechos = (String)attributes.get("hechos");

		if (hechos != null) {
			setHechos(hechos);
		}

		String pruebas = (String)attributes.get("pruebas");

		if (pruebas != null) {
			setPruebas(pruebas);
		}

		Integer id_estado = (Integer)attributes.get("id_estado");

		if (id_estado != null) {
			setId_estado(id_estado);
		}

		Integer id_implicado = (Integer)attributes.get("id_implicado");

		if (id_implicado != null) {
			setId_implicado(id_implicado);
		}

		Integer id_solicitante = (Integer)attributes.get("id_solicitante");

		if (id_solicitante != null) {
			setId_solicitante(id_solicitante);
		}

		Date fechaRegistro = (Date)attributes.get("fechaRegistro");

		if (fechaRegistro != null) {
			setFechaRegistro(fechaRegistro);
		}
	}

	public int getId_solicitud() {
		return _id_solicitud;
	}

	public void setId_solicitud(int id_solicitud) {
		_id_solicitud = id_solicitud;
	}

	public String getHechos() {
		if (_hechos == null) {
			return StringPool.BLANK;
		}
		else {
			return _hechos;
		}
	}

	public void setHechos(String hechos) {
		_hechos = hechos;
	}

	public String getPruebas() {
		if (_pruebas == null) {
			return StringPool.BLANK;
		}
		else {
			return _pruebas;
		}
	}

	public void setPruebas(String pruebas) {
		_pruebas = pruebas;
	}

	public int getId_estado() {
		return _id_estado;
	}

	public void setId_estado(int id_estado) {
		_id_estado = id_estado;
	}

	public int getId_implicado() {
		return _id_implicado;
	}

	public void setId_implicado(int id_implicado) {
		_id_implicado = id_implicado;
	}

	public int getId_solicitante() {
		return _id_solicitante;
	}

	public void setId_solicitante(int id_solicitante) {
		_id_solicitante = id_solicitante;
	}

	public Date getFechaRegistro() {
		return _fechaRegistro;
	}

	public void setFechaRegistro(Date fechaRegistro) {
		_fechaRegistro = fechaRegistro;
	}

	@Override
	public Solicitud toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Solicitud)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		SolicitudImpl solicitudImpl = new SolicitudImpl();

		solicitudImpl.setId_solicitud(getId_solicitud());
		solicitudImpl.setHechos(getHechos());
		solicitudImpl.setPruebas(getPruebas());
		solicitudImpl.setId_estado(getId_estado());
		solicitudImpl.setId_implicado(getId_implicado());
		solicitudImpl.setId_solicitante(getId_solicitante());
		solicitudImpl.setFechaRegistro(getFechaRegistro());

		solicitudImpl.resetOriginalValues();

		return solicitudImpl;
	}

	public int compareTo(Solicitud solicitud) {
		int primaryKey = solicitud.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Solicitud solicitud = null;

		try {
			solicitud = (Solicitud)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = solicitud.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Solicitud> toCacheModel() {
		SolicitudCacheModel solicitudCacheModel = new SolicitudCacheModel();

		solicitudCacheModel.id_solicitud = getId_solicitud();

		solicitudCacheModel.hechos = getHechos();

		String hechos = solicitudCacheModel.hechos;

		if ((hechos != null) && (hechos.length() == 0)) {
			solicitudCacheModel.hechos = null;
		}

		solicitudCacheModel.pruebas = getPruebas();

		String pruebas = solicitudCacheModel.pruebas;

		if ((pruebas != null) && (pruebas.length() == 0)) {
			solicitudCacheModel.pruebas = null;
		}

		solicitudCacheModel.id_estado = getId_estado();

		solicitudCacheModel.id_implicado = getId_implicado();

		solicitudCacheModel.id_solicitante = getId_solicitante();

		Date fechaRegistro = getFechaRegistro();

		if (fechaRegistro != null) {
			solicitudCacheModel.fechaRegistro = fechaRegistro.getTime();
		}
		else {
			solicitudCacheModel.fechaRegistro = Long.MIN_VALUE;
		}

		return solicitudCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id_solicitud=");
		sb.append(getId_solicitud());
		sb.append(", hechos=");
		sb.append(getHechos());
		sb.append(", pruebas=");
		sb.append(getPruebas());
		sb.append(", id_estado=");
		sb.append(getId_estado());
		sb.append(", id_implicado=");
		sb.append(getId_implicado());
		sb.append(", id_solicitante=");
		sb.append(getId_solicitante());
		sb.append(", fechaRegistro=");
		sb.append(getFechaRegistro());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("la.netco.solicitudes_sdisc.model.model.Solicitud");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_solicitud</column-name><column-value><![CDATA[");
		sb.append(getId_solicitud());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hechos</column-name><column-value><![CDATA[");
		sb.append(getHechos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pruebas</column-name><column-value><![CDATA[");
		sb.append(getPruebas());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_estado</column-name><column-value><![CDATA[");
		sb.append(getId_estado());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_implicado</column-name><column-value><![CDATA[");
		sb.append(getId_implicado());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_solicitante</column-name><column-value><![CDATA[");
		sb.append(getId_solicitante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fechaRegistro</column-name><column-value><![CDATA[");
		sb.append(getFechaRegistro());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Solicitud.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Solicitud.class
		};
	private int _id_solicitud;
	private String _hechos;
	private String _pruebas;
	private int _id_estado;
	private int _id_implicado;
	private int _id_solicitante;
	private Date _fechaRegistro;
	private Solicitud _escapedModelProxy;
}