/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package la.netco.solicitudes_sdisc.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import la.netco.solicitudes_sdisc.model.model.Ciudad;
import la.netco.solicitudes_sdisc.model.model.CiudadModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Ciudad service. Represents a row in the &quot;GEO_CIUDAD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link la.netco.solicitudes_sdisc.model.model.CiudadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CiudadImpl}.
 * </p>
 *
 * @author smontanez
 * @see CiudadImpl
 * @see la.netco.solicitudes_sdisc.model.model.Ciudad
 * @see la.netco.solicitudes_sdisc.model.model.CiudadModel
 * @generated
 */
public class CiudadModelImpl extends BaseModelImpl<Ciudad>
	implements CiudadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ciudad model instance should use the {@link la.netco.solicitudes_sdisc.model.model.Ciudad} interface instead.
	 */
	public static final String TABLE_NAME = "GEO_CIUDAD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_ciudad", Types.INTEGER },
			{ "nombre", Types.VARCHAR },
			{ "id_departamento", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table GEO_CIUDAD (id_ciudad INTEGER not null primary key IDENTITY,nombre VARCHAR(75) null,id_departamento INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table GEO_CIUDAD";
	public static final String ORDER_BY_JPQL = " ORDER BY ciudad.nombre ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEO_CIUDAD.nombre ASC";
	public static final String DATA_SOURCE = "csjDBDatasource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.la.netco.solicitudes_sdisc.model.model.Ciudad"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.la.netco.solicitudes_sdisc.model.model.Ciudad"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.la.netco.solicitudes_sdisc.model.model.Ciudad"),
			true);
	public static long ID_DEPARTAMENTO_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.la.netco.solicitudes_sdisc.model.model.Ciudad"));

	public CiudadModelImpl() {
	}

	public int getPrimaryKey() {
		return _id_ciudad;
	}

	public void setPrimaryKey(int primaryKey) {
		setId_ciudad(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id_ciudad);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Ciudad.class;
	}

	public String getModelClassName() {
		return Ciudad.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_ciudad", getId_ciudad());
		attributes.put("nombre", getNombre());
		attributes.put("id_departamento", getId_departamento());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id_ciudad = (Integer)attributes.get("id_ciudad");

		if (id_ciudad != null) {
			setId_ciudad(id_ciudad);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		Integer id_departamento = (Integer)attributes.get("id_departamento");

		if (id_departamento != null) {
			setId_departamento(id_departamento);
		}
	}

	public int getId_ciudad() {
		return _id_ciudad;
	}

	public void setId_ciudad(int id_ciudad) {
		_id_ciudad = id_ciudad;
	}

	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	public void setNombre(String nombre) {
		_columnBitmask = -1L;

		_nombre = nombre;
	}

	public int getId_departamento() {
		return _id_departamento;
	}

	public void setId_departamento(int id_departamento) {
		_columnBitmask |= ID_DEPARTAMENTO_COLUMN_BITMASK;

		if (!_setOriginalId_departamento) {
			_setOriginalId_departamento = true;

			_originalId_departamento = _id_departamento;
		}

		_id_departamento = id_departamento;
	}

	public int getOriginalId_departamento() {
		return _originalId_departamento;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Ciudad toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Ciudad)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CiudadImpl ciudadImpl = new CiudadImpl();

		ciudadImpl.setId_ciudad(getId_ciudad());
		ciudadImpl.setNombre(getNombre());
		ciudadImpl.setId_departamento(getId_departamento());

		ciudadImpl.resetOriginalValues();

		return ciudadImpl;
	}

	public int compareTo(Ciudad ciudad) {
		int value = 0;

		value = getNombre().compareTo(ciudad.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Ciudad ciudad = null;

		try {
			ciudad = (Ciudad)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = ciudad.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CiudadModelImpl ciudadModelImpl = this;

		ciudadModelImpl._originalId_departamento = ciudadModelImpl._id_departamento;

		ciudadModelImpl._setOriginalId_departamento = false;

		ciudadModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Ciudad> toCacheModel() {
		CiudadCacheModel ciudadCacheModel = new CiudadCacheModel();

		ciudadCacheModel.id_ciudad = getId_ciudad();

		ciudadCacheModel.nombre = getNombre();

		String nombre = ciudadCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			ciudadCacheModel.nombre = null;
		}

		ciudadCacheModel.id_departamento = getId_departamento();

		return ciudadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_ciudad=");
		sb.append(getId_ciudad());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", id_departamento=");
		sb.append(getId_departamento());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("la.netco.solicitudes_sdisc.model.model.Ciudad");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_ciudad</column-name><column-value><![CDATA[");
		sb.append(getId_ciudad());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_departamento</column-name><column-value><![CDATA[");
		sb.append(getId_departamento());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Ciudad.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Ciudad.class
		};
	private int _id_ciudad;
	private String _nombre;
	private int _id_departamento;
	private int _originalId_departamento;
	private boolean _setOriginalId_departamento;
	private long _columnBitmask;
	private Ciudad _escapedModelProxy;
}