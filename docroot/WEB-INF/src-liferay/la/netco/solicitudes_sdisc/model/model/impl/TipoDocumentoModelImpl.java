/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package la.netco.solicitudes_sdisc.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import la.netco.solicitudes_sdisc.model.model.TipoDocumento;
import la.netco.solicitudes_sdisc.model.model.TipoDocumentoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TipoDocumento service. Represents a row in the &quot;SOLISALAD_TIPO_DOCUMENTO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link la.netco.solicitudes_sdisc.model.model.TipoDocumentoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoDocumentoImpl}.
 * </p>
 *
 * @author smontanez
 * @see TipoDocumentoImpl
 * @see la.netco.solicitudes_sdisc.model.model.TipoDocumento
 * @see la.netco.solicitudes_sdisc.model.model.TipoDocumentoModel
 * @generated
 */
public class TipoDocumentoModelImpl extends BaseModelImpl<TipoDocumento>
	implements TipoDocumentoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo documento model instance should use the {@link la.netco.solicitudes_sdisc.model.model.TipoDocumento} interface instead.
	 */
	public static final String TABLE_NAME = "SOLISALAD_TIPO_DOCUMENTO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_tipo", Types.INTEGER },
			{ "nombre", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SOLISALAD_TIPO_DOCUMENTO (id_tipo INTEGER not null primary key IDENTITY,nombre VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SOLISALAD_TIPO_DOCUMENTO";
	public static final String DATA_SOURCE = "csjDBDatasource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.la.netco.solicitudes_sdisc.model.model.TipoDocumento"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.la.netco.solicitudes_sdisc.model.model.TipoDocumento"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.la.netco.solicitudes_sdisc.model.model.TipoDocumento"));

	public TipoDocumentoModelImpl() {
	}

	public int getPrimaryKey() {
		return _id_tipo_doc;
	}

	public void setPrimaryKey(int primaryKey) {
		setId_tipo_doc(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id_tipo_doc);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return TipoDocumento.class;
	}

	public String getModelClassName() {
		return TipoDocumento.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_tipo_doc", getId_tipo_doc());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id_tipo_doc = (Integer)attributes.get("id_tipo_doc");

		if (id_tipo_doc != null) {
			setId_tipo_doc(id_tipo_doc);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	public int getId_tipo_doc() {
		return _id_tipo_doc;
	}

	public void setId_tipo_doc(int id_tipo_doc) {
		_id_tipo_doc = id_tipo_doc;
	}

	public String getNombre() {
		return _nombre;
	}

	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@Override
	public TipoDocumento toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TipoDocumento)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TipoDocumentoImpl tipoDocumentoImpl = new TipoDocumentoImpl();

		tipoDocumentoImpl.setId_tipo_doc(getId_tipo_doc());
		tipoDocumentoImpl.setNombre(getNombre());

		tipoDocumentoImpl.resetOriginalValues();

		return tipoDocumentoImpl;
	}

	public int compareTo(TipoDocumento tipoDocumento) {
		int primaryKey = tipoDocumento.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TipoDocumento tipoDocumento = null;

		try {
			tipoDocumento = (TipoDocumento)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = tipoDocumento.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TipoDocumento> toCacheModel() {
		TipoDocumentoCacheModel tipoDocumentoCacheModel = new TipoDocumentoCacheModel();

		tipoDocumentoCacheModel.id_tipo_doc = getId_tipo_doc();

		tipoDocumentoCacheModel.nombre = getNombre();

		String nombre = tipoDocumentoCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			tipoDocumentoCacheModel.nombre = null;
		}

		return tipoDocumentoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{id_tipo_doc=");
		sb.append(getId_tipo_doc());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("la.netco.solicitudes_sdisc.model.model.TipoDocumento");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_tipo_doc</column-name><column-value><![CDATA[");
		sb.append(getId_tipo_doc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TipoDocumento.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TipoDocumento.class
		};
	private int _id_tipo_doc;
	private String _nombre;
	private TipoDocumento _escapedModelProxy;
}